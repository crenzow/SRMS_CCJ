package gui;

import javax.swing.*;
import java.sql.*;
import dbConnection.DatabaseConnection;
import java.text.NumberFormat;
import java.util.Locale;
import javax.swing.table.DefaultTableModel;

public class MainAdmin extends javax.swing.JFrame {

    public MainAdmin() {
        initComponents();
        loadProductsTable(); 
        fetchSalesData();
        salesRecordData();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new java.awt.Label();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        homePanel = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        salesPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        salesrecordTBL = new javax.swing.JTable();
        filterBTN = new javax.swing.JButton();
        totalsalesTXT = new javax.swing.JTextField();
        startDateChooser = new com.toedter.calendar.JDateChooser();
        endDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        deleteBTN = new javax.swing.JButton();
        addBTN = new javax.swing.JButton();
        updateBTN1 = new javax.swing.JButton();
        refreshBTN = new javax.swing.JButton();
        srsearchTXT = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        updateBTN2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        srsalesIDTXT = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        srsalespersonTXT = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        srproductnameTXT = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        srquantityTXT = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        srsalesTXT = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        srdateTXT = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        analyticsPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        warehousePanel = new javax.swing.JPanel();
        stocksTXT = new javax.swing.JTextField();
        searchTXT = new javax.swing.JTextField();
        productidTXT = new javax.swing.JTextField();
        productnameTXT = new javax.swing.JTextField();
        categoryTXT = new javax.swing.JTextField();
        priceTXT = new javax.swing.JTextField();
        searchBTN = new javax.swing.JButton();
        productnameLBL = new javax.swing.JLabel();
        stocksLBL = new javax.swing.JLabel();
        productidLBL = new javax.swing.JLabel();
        categoryLBL = new javax.swing.JLabel();
        priceLBL = new javax.swing.JLabel();
        deleteproductBTN = new javax.swing.JButton();
        updateproductBTN = new javax.swing.JButton();
        addproductBTN = new javax.swing.JButton();
        filterCMBBX = new javax.swing.JComboBox<>();
        clearBTN = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        productstable = new javax.swing.JTable();
        refreshProducts = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        usersPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        userTBL = new javax.swing.JTable();
        passwordLBL = new javax.swing.JLabel();
        salespersonidTXT = new javax.swing.JTextField();
        passwordTXT = new javax.swing.JTextField();
        salespersonidLBL = new javax.swing.JLabel();
        fnameLBL = new javax.swing.JLabel();
        fnameTXT = new javax.swing.JTextField();
        lnameLBL = new javax.swing.JLabel();
        lnameTXT = new javax.swing.JTextField();
        emailLBL = new javax.swing.JLabel();
        emailTXT = new javax.swing.JTextField();
        adduserBTN = new javax.swing.JButton();
        updateuserBTN = new javax.swing.JButton();
        deleteuserBTN = new javax.swing.JButton();
        searchuserBTN = new javax.swing.JButton();
        searchuserTXT = new javax.swing.JTextField();
        clearuserBTN = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();

        label1.setText("label1");

        jLabel4.setText("jLabel4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1000, 650));
        setPreferredSize(new java.awt.Dimension(1000, 650));
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(1000, 650));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(1000, 650));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(1000, 650));
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        homePanel.setBackground(new java.awt.Color(204, 204, 255));
        homePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/order.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        homePanel.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 280, 148, 119));

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/multiple-users-silhouette (1).png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        homePanel.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 280, 148, 119));

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/raw (1).png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        homePanel.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 280, 148, 119));

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/data-analytics.png"))); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        homePanel.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 280, 148, 119));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 54)); // NOI18N
        jLabel1.setText("WELCOME, ADMIN!");
        homePanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        jLabel2.setText("\"Manage sales, track progress, and optimize performanceâ€”all in one place.\"");
        homePanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 130, -1, -1));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/wp3716612-periwinkle-wallpapers.jpg"))); // NOI18N
        jLabel8.setText("jLabel6");
        homePanel.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 610));

        jTabbedPane1.addTab("    HOME    ", homePanel);

        salesPanel.setBackground(new java.awt.Color(204, 204, 255));
        salesPanel.setForeground(new java.awt.Color(0, 255, 255));
        salesPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        salesrecordTBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Sales ID", "Sale Person", "Product Name", "Quantity", "Sales", "Date"
            }
        ));
        jScrollPane4.setViewportView(salesrecordTBL);

        salesPanel.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 640, 437));

        filterBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        filterBTN.setText("FILTER");
        filterBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterBTNActionPerformed(evt);
            }
        });
        salesPanel.add(filterBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 80, 45));

        totalsalesTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalsalesTXTActionPerformed(evt);
            }
        });
        salesPanel.add(totalsalesTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 510, 110, 45));
        salesPanel.add(startDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 158, 45));
        salesPanel.add(endDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 20, 149, 45));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("FROM:");
        salesPanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 50, 47));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("TO:");
        salesPanel.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 20, 30, 47));

        deleteBTN.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        deleteBTN.setText("DELETE");
        deleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBTNActionPerformed(evt);
            }
        });
        salesPanel.add(deleteBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 470, 110, 40));

        addBTN.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        addBTN.setText("ADD");
        addBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBTNActionPerformed(evt);
            }
        });
        salesPanel.add(addBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 400, 110, 40));

        updateBTN1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        updateBTN1.setText("UPDATE");
        updateBTN1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBTN1ActionPerformed(evt);
            }
        });
        salesPanel.add(updateBTN1, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 400, 110, 40));

        refreshBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh-arrow.png"))); // NOI18N
        refreshBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBTNActionPerformed(evt);
            }
        });
        salesPanel.add(refreshBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 60, 45));

        srsearchTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                srsearchTXTActionPerformed(evt);
            }
        });
        salesPanel.add(srsearchTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 30, 170, 40));

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        salesPanel.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 30, -1, 40));

        updateBTN2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        updateBTN2.setText("CLEAR");
        updateBTN2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBTN2ActionPerformed(evt);
            }
        });
        salesPanel.add(updateBTN2, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 470, 110, 40));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setText("Sales ID:");
        salesPanel.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 90, -1, -1));

        srsalesIDTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                srsalesIDTXTActionPerformed(evt);
            }
        });
        salesPanel.add(srsalesIDTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 90, 110, 30));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel11.setText("Sales Person:");
        salesPanel.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 140, -1, -1));
        salesPanel.add(srsalespersonTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 140, 110, 30));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel12.setText("Product Name:");
        salesPanel.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 190, -1, -1));

        srproductnameTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                srproductnameTXTActionPerformed(evt);
            }
        });
        salesPanel.add(srproductnameTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 190, 110, 30));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel13.setText("Quantity Sold:");
        salesPanel.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 240, -1, -1));

        srquantityTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                srquantityTXTActionPerformed(evt);
            }
        });
        salesPanel.add(srquantityTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 240, 110, 30));

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel14.setText("Sales:");
        salesPanel.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 290, -1, -1));
        salesPanel.add(srsalesTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 290, 110, 30));

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel15.setText("Total Sales:");
        salesPanel.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 520, -1, -1));

        srdateTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                srdateTXTActionPerformed(evt);
            }
        });
        salesPanel.add(srdateTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 340, 110, 30));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel16.setText("Date:");
        salesPanel.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 340, -1, -1));

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/wp3716612-periwinkle-wallpapers.jpg"))); // NOI18N
        jLabel17.setText("jLabel6");
        salesPanel.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 610));

        jTabbedPane1.addTab("SALES RECORD", salesPanel);

        analyticsPanel.setBackground(new java.awt.Color(204, 204, 255));
        analyticsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/wp3716612-periwinkle-wallpapers.jpg"))); // NOI18N
        jLabel10.setText("jLabel6");
        analyticsPanel.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 610));

        jTabbedPane1.addTab(" ANALYTICS ", analyticsPanel);

        warehousePanel.setBackground(new java.awt.Color(204, 204, 255));
        warehousePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        stocksTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stocksTXTActionPerformed(evt);
            }
        });
        warehousePanel.add(stocksTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 340, 140, 40));

        searchTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTXTActionPerformed(evt);
            }
        });
        warehousePanel.add(searchTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 30, 220, 40));

        productidTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productidTXTActionPerformed(evt);
            }
        });
        warehousePanel.add(productidTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 100, 140, 40));

        productnameTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productnameTXTActionPerformed(evt);
            }
        });
        warehousePanel.add(productnameTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 160, 140, 40));

        categoryTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryTXTActionPerformed(evt);
            }
        });
        warehousePanel.add(categoryTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 220, 140, 40));

        priceTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceTXTActionPerformed(evt);
            }
        });
        warehousePanel.add(priceTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 280, 140, 40));

        searchBTN.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        searchBTN.setText("SEARCH");
        searchBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBTNActionPerformed(evt);
            }
        });
        warehousePanel.add(searchBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 30, -1, 40));

        productnameLBL.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        productnameLBL.setText("Product Name:");
        warehousePanel.add(productnameLBL, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 160, 140, 40));

        stocksLBL.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        stocksLBL.setText("Stocks:");
        warehousePanel.add(stocksLBL, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 340, 60, 40));

        productidLBL.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        productidLBL.setText("Product ID:");
        warehousePanel.add(productidLBL, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 100, 120, 40));

        categoryLBL.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        categoryLBL.setText("Category:");
        warehousePanel.add(categoryLBL, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 220, 90, 30));

        priceLBL.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        priceLBL.setText("Price:");
        warehousePanel.add(priceLBL, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 280, 90, 40));

        deleteproductBTN.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        deleteproductBTN.setText("DELETE");
        deleteproductBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteproductBTNActionPerformed(evt);
            }
        });
        warehousePanel.add(deleteproductBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 450, 140, 40));

        updateproductBTN.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        updateproductBTN.setText("UPDATE");
        updateproductBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateproductBTNActionPerformed(evt);
            }
        });
        warehousePanel.add(updateproductBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 400, 140, 40));

        addproductBTN.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        addproductBTN.setText("ADD");
        addproductBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addproductBTNActionPerformed(evt);
            }
        });
        warehousePanel.add(addproductBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 400, 140, 40));

        filterCMBBX.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        filterCMBBX.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Product ID", "Lowest to Highest Price", "Highest to Lowest Price", "Lowest to Highest Stocks", "Highest to Lowest Stocks", "Sort A-Z (Product Name)", "Sort Z-A (Product Name)" }));
        filterCMBBX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterCMBBXActionPerformed(evt);
            }
        });
        warehousePanel.add(filterCMBBX, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 190, 30));

        clearBTN.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        clearBTN.setText("CLEAR");
        clearBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBTNActionPerformed(evt);
            }
        });
        warehousePanel.add(clearBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 450, 140, 40));

        jScrollPane1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        productstable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Product Name", "Category", "Price", "Stocks"
            }
        ));
        jScrollPane1.setViewportView(productstable);

        warehousePanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 538, 448));

        refreshProducts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refreshSmall.png"))); // NOI18N
        refreshProducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshProductsActionPerformed(evt);
            }
        });
        warehousePanel.add(refreshProducts, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 30, 60, 30));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/wp3716612-periwinkle-wallpapers.jpg"))); // NOI18N
        jLabel6.setText("jLabel6");
        warehousePanel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 610));

        jTabbedPane1.addTab(" WAREHOUSE ", warehousePanel);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        userTBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Revenue"
            }
        ));
        jScrollPane3.setViewportView(userTBL);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 40, 485, 270));

        passwordLBL.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        passwordLBL.setText("Password:");
        jPanel1.add(passwordLBL, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 340, -1, -1));
        jPanel1.add(salespersonidTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 100, 140, 30));
        jPanel1.add(passwordTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 340, 140, 30));

        salespersonidLBL.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        salespersonidLBL.setText("Salesperson's ID:");
        jPanel1.add(salespersonidLBL, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, -1, 30));

        fnameLBL.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        fnameLBL.setText("First Name:");
        jPanel1.add(fnameLBL, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, -1, -1));

        fnameTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fnameTXTActionPerformed(evt);
            }
        });
        jPanel1.add(fnameTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 160, 140, 30));

        lnameLBL.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lnameLBL.setText("Last Name:");
        jPanel1.add(lnameLBL, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 220, -1, 30));
        jPanel1.add(lnameTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 220, 140, 30));

        emailLBL.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        emailLBL.setText("Email:");
        jPanel1.add(emailLBL, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 280, -1, -1));
        jPanel1.add(emailTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 280, 140, 30));

        adduserBTN.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        adduserBTN.setText("ADD");
        adduserBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adduserBTNActionPerformed(evt);
            }
        });
        jPanel1.add(adduserBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 410, 140, 30));

        updateuserBTN.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        updateuserBTN.setText("UPDATE");
        updateuserBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateuserBTNActionPerformed(evt);
            }
        });
        jPanel1.add(updateuserBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 410, 140, 30));

        deleteuserBTN.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        deleteuserBTN.setText("DELETE");
        deleteuserBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteuserBTNActionPerformed(evt);
            }
        });
        jPanel1.add(deleteuserBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 450, 140, 30));

        searchuserBTN.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        searchuserBTN.setText("SEARCH");
        searchuserBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchuserBTNActionPerformed(evt);
            }
        });
        jPanel1.add(searchuserBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 40, -1, 30));
        jPanel1.add(searchuserTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 40, 220, 30));

        clearuserBTN.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        clearuserBTN.setText("CLEAR");
        clearuserBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearuserBTNActionPerformed(evt);
            }
        });
        jPanel1.add(clearuserBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 450, 140, 30));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/wp3716612-periwinkle-wallpapers.jpg"))); // NOI18N
        jLabel9.setText("jLabel6");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 610));

        javax.swing.GroupLayout usersPanelLayout = new javax.swing.GroupLayout(usersPanel);
        usersPanel.setLayout(usersPanelLayout);
        usersPanelLayout.setHorizontalGroup(
            usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        usersPanelLayout.setVerticalGroup(
            usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("   USERS   ", usersPanel);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 609, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("  LOGOUT  ", jPanel7);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        // TODO add your handling code here:
        // Get the selected index of the tab
        int selectedIndex = jTabbedPane1.getSelectedIndex();

        // Check if the "Logout" tab (index 5) is selected
        if (selectedIndex == 5) {
            // Call the logout function to go back to Login frame
            logout();
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void clearuserBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearuserBTNActionPerformed
        // Clear all text fields
        searchuserTXT.setText("");
        salespersonidTXT.setText("");
        fnameTXT.setText("");
        lnameTXT.setText("");
        emailTXT.setText("");
        passwordTXT.setText("");

        // Optionally, reset the focus to the first text field (for better user experience)
        salespersonidTXT.requestFocus();
    }//GEN-LAST:event_clearuserBTNActionPerformed

    private void searchuserBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchuserBTNActionPerformed
        // Get the search query from the text field
        String searchQuery = searchuserTXT.getText().trim();

        if (searchQuery.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter a search term!");
            return;
        }

        // Database connection
        Connection conn = DatabaseConnection.getInstance().getConnection();

        // SQL query to search by userID, firstName, or lastName
        String sql = "SELECT * FROM users WHERE userID = ? OR firstName LIKE ? OR lastName LIKE ?";

        try {
            PreparedStatement ps = conn.prepareStatement(sql);

            // Set parameters for the query
            ps.setString(1, searchQuery); // Exact match for userID
            ps.setString(2, "%" + searchQuery + "%"); // Search by firstName (partial match)
            ps.setString(3, "%" + searchQuery + "%"); // Search by lastName (partial match)

            ResultSet rs = ps.executeQuery();

            // If a record is found, populate the text fields
            if (rs.next()) {
                salespersonidTXT.setText(rs.getString("userID"));
                fnameTXT.setText(rs.getString("firstName"));
                lnameTXT.setText(rs.getString("lastName"));
                emailTXT.setText(rs.getString("email"));
                passwordTXT.setText(rs.getString("password"));
            } else {
                JOptionPane.showMessageDialog(null, "User not found!");
            }

            ps.close();
            rs.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error retrieving data!");
            e.printStackTrace();
        }
    }//GEN-LAST:event_searchuserBTNActionPerformed

    private void deleteuserBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteuserBTNActionPerformed
        // Get the userID from the text field
        String userID = salespersonidTXT.getText().trim();

        // Validate that userID is provided
        if (userID.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter the User ID to delete!");
            return;
        }

        // Database connection
        Connection conn = DatabaseConnection.getInstance().getConnection();

        // SQL query to delete a user by userID
        String sql = "DELETE FROM users WHERE userID = ?";

        try {
            PreparedStatement ps = conn.prepareStatement(sql);

            // Set the userID to delete
            ps.setString(1, userID);

            // Execute the update and check if any rows were affected
            int rowsAffected = ps.executeUpdate();

            // If the user was deleted successfully
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "User deleted successfully!");
            } else {
                JOptionPane.showMessageDialog(null, "User not found!");
            }

            ps.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error deleting user!");
            e.printStackTrace();
        }
    }//GEN-LAST:event_deleteuserBTNActionPerformed

    private void updateuserBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateuserBTNActionPerformed
        // Get the updated values from the text fields
        String userID = salespersonidTXT.getText().trim();
        String firstName = fnameTXT.getText().trim();
        String lastName = lnameTXT.getText().trim();
        String email = emailTXT.getText().trim();
        String password = passwordTXT.getText().trim();

        // Validate that all fields are filled in
        if (userID.isEmpty() || firstName.isEmpty() || lastName.isEmpty() || email.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please fill in all fields!");
            return;
        }

        // Database connection
        Connection conn = DatabaseConnection.getInstance().getConnection();

        // SQL query to update user details in the database
        String sql = "UPDATE users SET firstName = ?, lastName = ?, email = ?, password = ? WHERE userID = ?";

        try {
            PreparedStatement ps = conn.prepareStatement(sql);

            // Set parameters for the query
            ps.setString(1, firstName); // Set updated firstName
            ps.setString(2, lastName);  // Set updated lastName
            ps.setString(3, email);     // Set updated email
            ps.setString(4, password);  // Set updated password
            ps.setString(5, userID);    // Set the userID to identify the record to update

            int rowsAffected = ps.executeUpdate();

            // If the update was successful
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "User details updated successfully!");
            } else {
                JOptionPane.showMessageDialog(null, "No user found with the given userID!");
            }

            ps.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error updating data!");
            e.printStackTrace();
        }
    }//GEN-LAST:event_updateuserBTNActionPerformed

    private void adduserBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adduserBTNActionPerformed
        // Get the values from the text fields
        String firstName = fnameTXT.getText().trim();
        String lastName = lnameTXT.getText().trim();
        String email = emailTXT.getText().trim();
        String password = passwordTXT.getText().trim();

        // Set role to "Salesperson" automatically
        String role = "Salesperson"; // Hardcoded role value

        // Validate that all fields are filled in
        if (firstName.isEmpty() || lastName.isEmpty() || email.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please fill in all fields!");
            return;
        }

        // Database connection
        Connection conn = DatabaseConnection.getInstance().getConnection();

        // SQL query to insert a new user into the database
        String sql = "INSERT INTO users (firstName, lastName, role, email, password) VALUES (?, ?, ?, ?, ?)";

        try {
            PreparedStatement ps = conn.prepareStatement(sql);

            // Set parameters for the query
            ps.setString(1, firstName);  // Set firstName
            ps.setString(2, lastName);   // Set lastName
            ps.setString(3, role);       // Set role (Salesperson)
            ps.setString(4, email);      // Set email
            ps.setString(5, password);   // Set password

            int rowsAffected = ps.executeUpdate();

            // If the insertion was successful
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "User added successfully!");
            } else {
                JOptionPane.showMessageDialog(null, "Error adding user!");
            }

            ps.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error inserting data!");
            e.printStackTrace();
        }
    }//GEN-LAST:event_adduserBTNActionPerformed

    private void clearBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBTNActionPerformed
        // Clear all text fields
        searchTXT.setText("");
        productidTXT.setText("");
        productnameTXT.setText("");
        categoryTXT.setText("");
        priceTXT.setText("");
        stocksTXT.setText("");

    }//GEN-LAST:event_clearBTNActionPerformed

    private void filterCMBBXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterCMBBXActionPerformed
        String selectedOption = (String) filterCMBBX.getSelectedItem();
        sortProductsTable(selectedOption);
    }//GEN-LAST:event_filterCMBBXActionPerformed

    private void addproductBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addproductBTNActionPerformed
        Connection conn = DatabaseConnection.getInstance().getConnection();
        String productID = productidTXT.getText().trim();
        String productName = productnameTXT.getText().trim();
        String category = categoryTXT.getText().trim();
        String price = priceTXT.getText().trim();
        String stockQuantity = stocksTXT.getText().trim();

        // Check if any field is empty
        if (productID.isEmpty() || productName.isEmpty() || category.isEmpty() || price.isEmpty() || stockQuantity.isEmpty()) {
            JOptionPane.showMessageDialog(null, "All fields are required!");
            return;
        }

        // Confirmation dialog
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to add this product?", "Confirm Add", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return; // If user selects NO, exit the method
        }

        try {
            String sql = "INSERT INTO products (productID, productName, category, price, stockQuantity) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, productID);
            ps.setString(2, productName);
            ps.setString(3, category);
            ps.setString(4, price);
            ps.setString(5, stockQuantity);

            int rowsInserted = ps.executeUpdate(); // Execute insert query

            if (rowsInserted > 0) {
                JOptionPane.showMessageDialog(null, "Product Added Successfully!");

                // Clear the text fields after adding
                productidTXT.setText("");
                productnameTXT.setText("");
                categoryTXT.setText("");
                priceTXT.setText("");
                stocksTXT.setText("");

                // Refresh the table after adding
                loadProductsTable();
            } else {
                JOptionPane.showMessageDialog(null, "Failed to Add Product!");
            }

            ps.close(); // Close statement
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error Adding Data!");
            e.printStackTrace();
        }
    }//GEN-LAST:event_addproductBTNActionPerformed

    private void updateproductBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateproductBTNActionPerformed
        Connection conn = DatabaseConnection.getInstance().getConnection();
        String productID = productidTXT.getText().trim();
        String productName = productnameTXT.getText().trim();
        String category = categoryTXT.getText().trim();
        String price = priceTXT.getText().trim();
        String stockQuantity = stocksTXT.getText().trim();

        // Check if productID is empty
        if (productID.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Search for a product before updating!");
            return;
        }

        // Confirmation dialog
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to update this product?", "Confirm Update", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return; // If user selects NO, exit the method
        }

        try {
            String sql = "UPDATE products SET productName = ?, category = ?, price = ?, stockQuantity = ? WHERE productID = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, productName);
            ps.setString(2, category);
            ps.setString(3, price);
            ps.setString(4, stockQuantity);
            ps.setString(5, productID);

            int rowsUpdated = ps.executeUpdate(); // Execute update query

            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(null, "Product Updated Successfully!");

                // Refresh the table after updating
                loadProductsTable();
            } else {
                JOptionPane.showMessageDialog(null, "Update Failed. Please check Product ID.");
            }

            ps.close(); // Close statement
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error Updating Data!");
            e.printStackTrace();
        }
    }//GEN-LAST:event_updateproductBTNActionPerformed

    private void deleteproductBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteproductBTNActionPerformed
        Connection conn = DatabaseConnection.getInstance().getConnection();
        String productID = productidTXT.getText().trim();

        // Check if productID is empty
        if (productID.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Enter Product ID to Delete!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Confirmation dialog
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this product?",
            "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return; // If user selects NO, exit the method
        }

        try {
            String sql = "DELETE FROM products WHERE productID = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, productID);

            int rowsDeleted = ps.executeUpdate(); // Execute delete query

            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(null, "Product Deleted Successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

                // Clear text fields after deleting
                searchTXT.setText("");
                productidTXT.setText("");
                productnameTXT.setText("");
                categoryTXT.setText("");
                priceTXT.setText("");
                stocksTXT.setText("");

                // Refresh the table after deletion
                loadProductsTable();
            } else {
                JOptionPane.showMessageDialog(null, "Product Not Found!", "Warning", JOptionPane.WARNING_MESSAGE);
            }

            ps.close(); // Close statement
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error Deleting Data!", "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_deleteproductBTNActionPerformed

    private void searchBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBTNActionPerformed
        Connection conn = DatabaseConnection.getInstance().getConnection();
        String searchQuery = searchTXT.getText().trim();

        if (searchQuery.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Enter Product ID or Name!");
            return;
        }

        try {
            String sql = "SELECT * FROM products WHERE productID = ? OR productName = ?";
            PreparedStatement ps = conn.prepareStatement(sql);  // Fix: changed `query` to `sql`
            ps.setString(1, searchQuery);
            ps.setString(2, searchQuery);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                productidTXT.setText(rs.getString("productID"));
                productnameTXT.setText(rs.getString("productName"));
                categoryTXT.setText(rs.getString("category"));
                priceTXT.setText(rs.getString("price"));
                stocksTXT.setText(rs.getString("stockQuantity"));
                searchTXT.setText("");
            } else {
                JOptionPane.showMessageDialog(null, "Product Not Found!");
            }

            // Close resources
            rs.close();
            ps.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error Retrieving Data!");
            e.printStackTrace();
        }
    }//GEN-LAST:event_searchBTNActionPerformed

    private void priceTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceTXTActionPerformed

    private void categoryTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_categoryTXTActionPerformed

    private void productnameTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productnameTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productnameTXTActionPerformed

    private void productidTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productidTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productidTXTActionPerformed

    private void searchTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTXTActionPerformed

    private void stocksTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stocksTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stocksTXTActionPerformed

    private void totalsalesTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalsalesTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalsalesTXTActionPerformed

    private void filterBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterBTNActionPerformed
        // Get the start and end dates from the text fields
        // String startDate = startDateTXT.getText().trim();
        Date startDate = new java.sql.Date(startDateChooser.getDate().getTime());
        // String endDate = endDateTXT.getText().trim();
        Date endDate = new java.sql.Date(endDateChooser.getDate().getTime());

        // Check if the dates are provided
        if (startDate == null || endDate == null) {
            JOptionPane.showMessageDialog(null, "Please enter both start and end dates!");
            return;
        }

        // Database connection
        Connection conn = DatabaseConnection.getInstance().getConnection();

        // SQL query to filter sales by the date range
        String sql = "SELECT s.salesID, CONCAT(u.firstName, ' ', u.lastName) AS salesPerson, "
        + "p.productName, s.quantitySold, s.totalPrice AS sales, s.saleDate "
        + "FROM sales s "
        + "JOIN users u ON s.userID = u.userID "
        + "JOIN products p ON s.productID = p.productID "
        + "WHERE s.saleDate BETWEEN ? AND ?";  // Filtering based on date range

        try {
            PreparedStatement ps = conn.prepareStatement(sql);

            // Set the start and end dates for the query
            ps.setDate(1, startDate);
            ps.setDate(2, endDate);

            ResultSet rs = ps.executeQuery();

            // Create a DefaultTableModel to display the data in JTable
            DefaultTableModel tableModel = new DefaultTableModel();

            // Adding column headers to the table model
            tableModel.addColumn("Sales ID");
            tableModel.addColumn("Sales Person");
            tableModel.addColumn("Product Name");
            tableModel.addColumn("Quantity Sold");
            tableModel.addColumn("Sales");
            tableModel.addColumn("Sale Date");

            // Variable to store the total sales
            double totalSales = 0;
            
            NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("en", "PH"));

            // Adding fetched data into the table model
            while (rs.next()) {
                int salesID = rs.getInt("salesID");
                String salesPerson = rs.getString("salesPerson");
                String productName = rs.getString("productName");
                int quantitySold = rs.getInt("quantitySold");
                double sales = rs.getDouble("sales");
                Date saleDate = rs.getDate("saleDate");
                
                String formattedSales = currencyFormat.format(sales);

                // Adding row to the table
                tableModel.addRow(new Object[] { salesID, salesPerson, productName, quantitySold, formattedSales, saleDate });

                // Accumulate the total sales
                totalSales += sales;
            }

            // Set the table model to the JTable
            salesrecordTBL.setModel(tableModel);

            // Display the total sales in the text field
            //totalsalesTXT.setText(String.format("%.2f", totalSales));
            
         //   NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("en", "PH"));
            totalsalesTXT.setText(currencyFormat.format(totalSales));

            // Close the ResultSet and PreparedStatement
            rs.close();
            ps.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error retrieving data!");
            e.printStackTrace();
        }
    }//GEN-LAST:event_filterBTNActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        jTabbedPane1.setSelectedIndex(2);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jTabbedPane1.setSelectedIndex(4);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jTabbedPane1.setSelectedIndex(3); // Palitan ng tamang index ng "WAREHOUSE" tab
    }//GEN-LAST:event_jButton2ActionPerformed

    private void fnameTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fnameTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fnameTXTActionPerformed

    private void deleteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBTNActionPerformed
       
    }//GEN-LAST:event_deleteBTNActionPerformed

    private void addBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBTNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addBTNActionPerformed

    private void updateBTN1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBTN1ActionPerformed
    
    }//GEN-LAST:event_updateBTN1ActionPerformed

    private void refreshBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBTNActionPerformed
        // TODO add your handling code here:
        salesRecordData();
    }//GEN-LAST:event_refreshBTNActionPerformed

    private void refreshProductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshProductsActionPerformed
        // TODO add your handling code here:
        loadProductsTable();
    }//GEN-LAST:event_refreshProductsActionPerformed

    private void srsearchTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_srsearchTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_srsearchTXTActionPerformed

    private void updateBTN2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBTN2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateBTN2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    String searchQuery = srsearchTXT.getText().trim();

    if (searchQuery.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Enter Sales ID or Product ID!", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String sql = "SELECT s.salesID, s.quantitySold, s.saleDate, s.totalPrice, u.firstName, p.productName " +
                 "FROM sales s " +
                 "JOIN users u ON s.userID = u.userID " +
                 "JOIN products p ON s.productID = p.productID " +
                 "WHERE s.salesID = ? OR s.productID = ?";

    try (Connection conn = DatabaseConnection.getInstance().getConnection();
         PreparedStatement ps = conn.prepareStatement(sql)) {

        ps.setString(1, searchQuery);
        ps.setString(2, searchQuery);

        try (ResultSet rs = ps.executeQuery()) {
            if (rs.next()) {
                srsalesIDTXT.setText(rs.getString("salesID"));
                srsalespersonTXT.setText(rs.getString("firstName")); // Salesperson's first name
                srproductnameTXT.setText(rs.getString("productName"));
                srquantityTXT.setText(rs.getString("quantitySold"));
                srsalesTXT.setText(rs.getString("totalPrice"));
                srdateTXT.setText(rs.getString("saleDate"));
            } else {
                JOptionPane.showMessageDialog(null, "Sales Record Not Found!", "Information", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error Retrieving Data!", "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void srsalesIDTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_srsalesIDTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_srsalesIDTXTActionPerformed

    private void srquantityTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_srquantityTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_srquantityTXTActionPerformed

    private void srdateTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_srdateTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_srdateTXTActionPerformed

    private void srproductnameTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_srproductnameTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_srproductnameTXTActionPerformed

    private void logout() {
        // Hide the current frame (MainAdmin or MainUser)
        this.setVisible(false);

        // Show the Login frame (assuming Login.java is your login frame class)
        Login loginFrame = new Login(); // Create a new instance of Login frame
        loginFrame.setVisible(true);

        // Optionally, add a WindowListener to exit the app when Login window is closed
        loginFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                System.exit(0); // Exit the application when Login window is closed
            }
        });
    }
    
    // FOR JTABLE WAREHOUSE
    private void loadProductsTable() {
        Connection conn = DatabaseConnection.getInstance().getConnection();
        DefaultTableModel model = (DefaultTableModel) productstable.getModel();

        // Clear existing table data
        model.setRowCount(0);

        try {
            String sql = "SELECT * FROM products";
            PreparedStatement ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            
            NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("en", "PH"));

            while (rs.next()) {
                // Get data from ResultSet
                String productID = rs.getString("productID");
                String productName = rs.getString("productName");
                String category = rs.getString("category");
             //   String price = rs.getString("price");
                String stockQuantity = rs.getString("stockQuantity");
                
                // Convert price from String to double, then format it
            double priceValue = Double.parseDouble(rs.getString("price"));  // Convert string to double
            String formattedPrice = currencyFormat.format(priceValue); // Format with â‚± and commas

                // Add row to table
                model.addRow(new Object[]{productID, productName, category, formattedPrice, stockQuantity});
            }

            ps.close();
            rs.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error Loading Data!");
            e.printStackTrace();
        }
    }

    // FOR JTABLE FILTER WAREHOUSE
    private void sortProductsTable(String sortOption) {
        Connection conn = DatabaseConnection.getInstance().getConnection();
        DefaultTableModel model = (DefaultTableModel) productstable.getModel();

        // Clear existing table data
        model.setRowCount(0);

        String sql = "SELECT * FROM products"; // Default query

        switch (sortOption) {
            case "Lowest to Highest Price":
                sql += " ORDER BY price ASC";
                break;
            case "Highest to Lowest Price":
                sql += " ORDER BY price DESC";
                break;
            case "Lowest to Highest Stocks":
                sql += " ORDER BY stockQuantity ASC";
                break;
            case "Highest to Lowest Stocks":
                sql += " ORDER BY stockQuantity DESC";
                break;
            case "Product ID":
                sql += " ORDER BY CAST(productID AS UNSIGNED) ASC"; // Corrected numeric sorting
                break;
            case "Sort A-Z (Product Name)":
                sql += " ORDER BY productName ASC";
                break;
            case "Sort Z-A (Product Name)":
                sql += " ORDER BY productName DESC";
                break;
            default:
                JOptionPane.showMessageDialog(null, "Invalid sort option!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
        }

        try (PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            
            NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("en", "PH"));

            while (rs.next()) {
                String productID = rs.getString("productID");
                String productName = rs.getString("productName");
                String category = rs.getString("category");
               // String price = rs.getString("price");
                String stockQuantity = rs.getString("stockQuantity");
                
                double priceValue = Double.parseDouble(rs.getString("price"));  // Convert string to double
            String formattedPrice = currencyFormat.format(priceValue); // Format with â‚± and commas


                // Add row to table
                model.addRow(new Object[]{productID, productName, category, formattedPrice, stockQuantity});
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error Loading Data!", "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }


    // FOR JTABLE USER                                              
    private void fetchSalesData() {  // Modify method to not depend on ActionEvent
        // Database connection
        Connection conn = DatabaseConnection.getInstance().getConnection();

        // SQL query to fetch user's full name (fname + lname) and their total revenue from sales
        String sql = "SELECT CONCAT(u.firstName, ' ', u.lastName) AS fullName, "
                   + "SUM(s.totalPrice) AS totalRevenue "
                   + "FROM users u "
                   + "JOIN sales s ON u.userID = s.userID "
                   + "GROUP BY u.userID";

        try {
            PreparedStatement ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            // Create a DefaultTableModel for displaying data in a JTable
            DefaultTableModel tableModel = new DefaultTableModel();
            tableModel.addColumn("Full Name");
            tableModel.addColumn("Total Revenue");
            
            NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("en", "PH"));

            // Display the fetched data in JTable (or use it as needed)
            while (rs.next()) {
                String fullName = rs.getString("fullName");
                double totalRevenue = rs.getDouble("totalRevenue");
                
                String formattedRevenue = currencyFormat.format(totalRevenue);

                // Add data to the JTable
                tableModel.addRow(new Object[]{fullName, formattedRevenue});
            }

            // Assuming you have a JTable named salesTable
            userTBL.setModel(tableModel);

            ps.close();
            rs.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error retrieving data!");
            e.printStackTrace();
        }
    }
    
    public void salesRecordData() {
    // Database connection
        Connection conn = DatabaseConnection.getInstance().getConnection();

        // SQL query to fetch the sales data
        String sql = "SELECT s.salesID, CONCAT(u.firstName, ' ', u.lastName) AS salesPerson, "
                   + "p.productName, s.quantitySold, s.totalPrice AS sales, s.saleDate "
                   + "FROM sales s "
                   + "JOIN users u ON s.userID = u.userID "
                   + "JOIN products p ON s.productID = p.productID "
                   + "ORDER BY s.salesID ASC";        // Sort by salesID in ascending order


        try {
            PreparedStatement ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            // Create a DefaultTableModel to display the data in JTable
            DefaultTableModel tableModel = new DefaultTableModel();

            // Adding column headers to the table model
            tableModel.addColumn("Sales ID");
            tableModel.addColumn("Sales Person");
            tableModel.addColumn("Product Name");
            tableModel.addColumn("Quantity Sold");
            tableModel.addColumn("Sales");
            tableModel.addColumn("Sale Date");

            // Variable to accumulate the total sales
            double totalSales = 0;
            // Currency formatter for Philippine Peso
            NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("en", "PH"));

            // Adding fetched data into the table model
            while (rs.next()) {
                int salesID = rs.getInt("salesID");
                String salesPerson = rs.getString("salesPerson");
                String productName = rs.getString("productName");
                int quantitySold = rs.getInt("quantitySold");
                double sales = rs.getDouble("sales");
                Date saleDate = rs.getDate("saleDate");
                
                // Format sales amount
                String formattedSales = currencyFormat.format(sales);

                // Add the row to the JTable
                tableModel.addRow(new Object[]{salesID, salesPerson, productName, quantitySold, formattedSales, saleDate});

                // Accumulate the total sales
                totalSales += sales;
            }

            // Set the JTable model to display the data
            salesrecordTBL.setModel(tableModel);

            // Update the total sales in the text field
            //totalsalesTXT.setText(String.format("%.2f", totalSales));
         //   NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("en", "PH"));
            totalsalesTXT.setText(currencyFormat.format(totalSales));


            // Close the resources
            ps.close();
            rs.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error retrieving sales data!");
            e.printStackTrace();
        }
    }
    
   

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainAdmin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBTN;
    private javax.swing.JButton addproductBTN;
    private javax.swing.JButton adduserBTN;
    private javax.swing.JPanel analyticsPanel;
    private javax.swing.JLabel categoryLBL;
    private javax.swing.JTextField categoryTXT;
    private javax.swing.JButton clearBTN;
    private javax.swing.JButton clearuserBTN;
    private javax.swing.JButton deleteBTN;
    private javax.swing.JButton deleteproductBTN;
    private javax.swing.JButton deleteuserBTN;
    private javax.swing.JLabel emailLBL;
    private javax.swing.JTextField emailTXT;
    private com.toedter.calendar.JDateChooser endDateChooser;
    private javax.swing.JButton filterBTN;
    private javax.swing.JComboBox<String> filterCMBBX;
    private javax.swing.JLabel fnameLBL;
    private javax.swing.JTextField fnameTXT;
    private javax.swing.JPanel homePanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private java.awt.Label label1;
    private javax.swing.JLabel lnameLBL;
    private javax.swing.JTextField lnameTXT;
    private javax.swing.JLabel passwordLBL;
    private javax.swing.JTextField passwordTXT;
    private javax.swing.JLabel priceLBL;
    private javax.swing.JTextField priceTXT;
    private javax.swing.JLabel productidLBL;
    private javax.swing.JTextField productidTXT;
    private javax.swing.JLabel productnameLBL;
    private javax.swing.JTextField productnameTXT;
    private javax.swing.JTable productstable;
    private javax.swing.JButton refreshBTN;
    private javax.swing.JButton refreshProducts;
    private javax.swing.JPanel salesPanel;
    private javax.swing.JLabel salespersonidLBL;
    private javax.swing.JTextField salespersonidTXT;
    private javax.swing.JTable salesrecordTBL;
    private javax.swing.JButton searchBTN;
    private javax.swing.JTextField searchTXT;
    private javax.swing.JButton searchuserBTN;
    private javax.swing.JTextField searchuserTXT;
    private javax.swing.JTextField srdateTXT;
    private javax.swing.JTextField srproductnameTXT;
    private javax.swing.JTextField srquantityTXT;
    private javax.swing.JTextField srsalesIDTXT;
    private javax.swing.JTextField srsalesTXT;
    private javax.swing.JTextField srsalespersonTXT;
    private javax.swing.JTextField srsearchTXT;
    private com.toedter.calendar.JDateChooser startDateChooser;
    private javax.swing.JLabel stocksLBL;
    private javax.swing.JTextField stocksTXT;
    private javax.swing.JTextField totalsalesTXT;
    private javax.swing.JButton updateBTN1;
    private javax.swing.JButton updateBTN2;
    private javax.swing.JButton updateproductBTN;
    private javax.swing.JButton updateuserBTN;
    private javax.swing.JTable userTBL;
    private javax.swing.JPanel usersPanel;
    private javax.swing.JPanel warehousePanel;
    // End of variables declaration//GEN-END:variables
}
